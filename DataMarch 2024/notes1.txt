WHAT IS LANGUAGE?
==>A lang is used to communicate.
==>Language is a mode of communication that is used to share ideas, opinions with each other.we need a language that is understandable by both communicators.
==>For general communication,use general lang like hindi, english etc

FAQ:
What is Computer Language?
==>A lang is used to communicate with the computer m/c.
 ==>But why?
==>instead of performing complex operation manually,it is better to interact with computer /m/c....Within fraction of sec we will get answer.Time and human effort will get reduced.






==>But we can communicate with computer in that language, which is understandable to the computer.
i.e machine lang/binary lang.
for that we need to pass intructions to a computer  in a machine/binary code only.

FAQ:
Can any1 pass instructions in binary lang?
==>no not possible.
==>we cannot write applications in binary lang because of its  complex nature.
so for that we have to first learn one programming lang.
==>A programming language is a computer language that is used by programmers (developers) to communicate with computers. It is a set of instructions written in any specific language ( C, C++, Java, Python) to perform a specific task.

==>using programming lang we are writing programs (source code). source code cannot communicate with computer directly because whatever instructions has written it is in english lang.computer cannot understand english. it understand only binary lang.1/0 ...

FAQ:
How to convert english statments to binary lang?
==>Compiler is a predefined program/software responsible for conversion into binary languages.
==>After compilation process, we can  pass input to the computer for processing the output. this is 
the process of communication with the computer.


Summary:
Programming Language-  The programing language enables us to write efficient programs and develop online solutions such as- mobile applications, web applications, and games, etc.

Types of programming language
1. Low-level programming language
Low-level language is machine-dependent (0s and 1s) programming language. The processor runs low- level programs directly without the need of a compiler or interpreter, so the programs written in low-level language can be run very fast.


2. High-level programming language (HLL) -It is designed for developing user-friendly software programs and websites.
This programming language requires a compiler or interpreter to translate the program into machine language (execute the program).
Example: Python, Java, JavaScript, PHP, C#, C,C++, etc.
A high-level language is further divided into two parts -
	a)Procedural Oriented programming language
	b)Object-Oriented Programming language
 
FAQ:
What is a compiler and interpreter?
Compiler: A compiler translates code from a high-level programming language (like Python, JavaScript ) into machine code before the program runs. The work of a Compiler is to transform the codes written in the programming language into machine code (format of 0s and 1s) so that computers can understand.
C, C++, C#, etc are programming languages that are compiler-based.

Interpreter: An interpreter translates code written in a high-level programming language into machine code line-by-line as the code runs.It translates only one statement of the program at a time.
Python, Ruby, Perl, MATLAB, etc are programming languages that are interpreter-based.

==>A compiler is similar to an interpreter. However, a compiler is faster than an interpreter and translates the entire file at once. An interpreter reads the source program line by line and, therefore, is a slower process. 

FAQ:
Difference between Compiler and Interpreter
Compiler													Interpreter
1)Execution of the program takes place only after the        Execution of the program happens after every line is checked or whole program is compiled.							      evaluated.

2)Compiled codes run faster than Interpreter.			      Interpreted codes run slower than Compiler.

3)It does not require source code for later execution.	      It requires source code for later execution.

4)The compiler saves the Machine Language in form of     The Interpreter does not save the Machine Language.
Machine Code on disks.

==================================================================================================
FAQ:
Using computer lang what kinds of applications we can developed?
1: Standalone application/Desktop application
==>application which provides services to a single user/client is called as standalone application
==>application that is installed in our computer. browsing from internet requires to install chrome, VLC player.
==>Doesnot requires need for a server or internet connection.
ex-->AntiVirus,Calculator,notepad,Microsoft word,mobile -app,gaming,all programs which starts with main()
C lang is used in standalone application/desktop application






2: WebApplication/Client-Server Application
==>Application executes on server provide services to the multiple clients concurrently is called as webapplication
==>Without installing any software,still we are working is webapplication.it is not necessary to install gmail/facebook in our computer. we just need browser s/w to browse any application that is running in server.
ex-->facebook,gmail,ticket reservation







Difference between Standalone Application and WebApplication
 Standalone Application												WebApplication
1)The standalone userâ€™s applications can run on a 				The client-Server application can run on any machine which         single local machine.										        has an internet 																			connection.

2)To run the standalone application, a network or internet        To run the Client-Server application, a network or internet 	connection is not required.								connection is required.

3)No scalability.												Efficient in scalability and ability to provide shared 																	resources to multiple clients.



===============================================================================
Platform Dependency...
==>Platform dependent  refers to applications that run under only one operating system .
==>On which platform we compile the application,on the same platform only we can run the application
==>compiler is working for specific os i.e window compiler is working for window os.
==>.
========================================================================================================


CONVERSION OF .C TO.EXE

C sourcefile----->	compiler---->object file--->linker--->executable file
demo.c			                  demo.obj			            demo.exe
	COMPILATION PHASE 						   EXECUTION/RUNNING PHASE 

Source file-->The file in which source code(program) is written.
demo.c
demo.c.c
demo.c-->name of the file 
.c-->extension
123demo.c //valid

Object File
source code is provided to language translator like compiler which converts it into m/c understandable code which is called m/c code or object code.
  object file is in binary format(0,1 format)
object file is in machine level lang/not in human readble format 
  compilation process-->the process of converting error free source code into object code

Linker
==>linker helps in executing the object file.The output of the linker is the executable file.
==>all the programs written in C use library functions. 
==>These library functions are pre-compiled, and the object code of these library files is stored with '.lib' extension. 
==>The main working of the linker is to combine the object code of library files with the object code of our program. 

============================================================================
======================================================================================












IDENTIFIER

Identifier is a name given to the entity/container(variable,array,string,function,structure) .
C identifiers represent the name in the C program, for example, variables, functions, arrays, structures, unions, labels, etc.
Identifiers are userdefined words.

An identifier can be composed of letters such as uppercase, lowercase letters, underscore, digits, but the starting letter should be either an alphabet or an underscore.

Rules for constructing C identifiers

1)The first character of an identifier should be either an alphabet or an underscore, and then it can be followed by any of the character, digit, or underscore.
2)It should not begin with any numerical digit.
3)In identifiers, both uppercase and lowercase letters are distinct. Therefore, we can say that identifiers are case sensitive.
4)Commas or blank spaces cannot be specified within an identifier.
5)Keywords cannot be represented as an identifier.
6)The length of the identifiers should not be more than 31 characters.
7)Identifiers should be written in such a way that it is meaningful, short, and easy to read.
==============================================================================

VARIABLE
==>For every computer application we need to store information at a particular location. 
==>every m/c is having memory locations,every memory location is identified by an address(+ve integer value)
==>A name given to the memory location in which data of different types can be stored and retrieves it when required is called as variable.

syntax:
data_type variable_name = value;    // defining single variable
            or
data_type variable_name1, variable_name2;    // defining multiple variable

There are 3 aspects of defining a variable:
Variable Declaration
Variable Initialization

1. C Variable Declaration
==>Variable declaration in C tells the compiler about the existence of the variable with the given name and data type.
==>At declaration,compiler automatically allocates the memory for it.

2. C Variable Initialization
Initialization of a variable is the process where the user assigns some meaningful value to the variable
A  variable will contain some random garbage value till it is not initialized.

int x;//declaration
x=10;//initilization
int x=20;//declaration+initilization
====================================================================================
Rules for Naming Variables in C
You can assign any name to the variable as long as it follows the following rules:

A variable name must only contain alphabets, digits, and underscore.
A variable name must start with an alphabet or an underscore only. It cannot start with a digit.
No whitespace is allowed within the variable name.
A variable name must not be any reserved word or keyword.

int BREAK;//valid
int Break;//valid
int break;//invalid
int break1=1,2;//not valid

==============================================================================================

=======================================================================================
KEYWORDS
==>keywords is a predefined words whose meaning and functionality is already predefine and
 as a user we cannot change any one of those...
32 keywords
ex:break,for,while-----
==>keywords always use in small letters
BREAK//error->it is no longer a keyword
==>we cannot use keywords as an identifiers.
=======================================================================
Keyword														Identifier
Keyword is a pre-defined word.						The identifier is a user-defined word
It must be used in a lowercase letter.				It can be written in both lowercase and uppercase letters.
Its meaning is pre-defined in the c compiler.			Its meaning is not defined in the c compiler.

=================================================================================







Data Types in C
A data type specifies the type of data that a variable can store such as integer, floating, character, etc.
The data types in C can be classified as follows

Primitive Data Types::Primitive data types are the most basic data types that are used for representing simple values such as integers, float, characters, etc.
User Defined Data Types	::The user-defined data types are defined by the user himself.ex:Array,pointer

============================================================================================

DATATYPES    			KEYWORD    		 16bit      		 32/64bit     		format specifier
INTEGER			   	 int	     			2bytes       		4bytes    		 %d
-32768 to 32767

FLOAT					float	    		 4 bytes	  	4bytes    		%f

DOUBLE					double        			  8bytes	  		8bytes    		%lf
(long float)

CHARACTER				char         			1byte         	         1        			 %c
'A'-'Z','a'-'z',
'0'--'9','#'
256 characters

long -->long(keyword) 32/64(8 bytes)  like phno
(long int)


1--->int
'1'-->char
1.0--->double every decimal number is by default double
1.0f-->float
"1"-->string



=======================================================================================
Format Specifier:
==>The format string determines the format of the input and output.
==>format specifier tells which type of data to be accepted from user or display on console

============================================================================
============================================================================
C Operators
An operator is simply a symbol that is used to perform operations on operands.

Precedence of Operators in C
Operator precedence determines which operation is performed first in an expression with more than one operator with different precedence.

Operator Associativity
Operator associativity is used when two operators of the same precedence appear in an expression. Associativity can be either from Left to Right or Right to Left. 

Category				Operator						Associativity
Postfix					() [] -> . ++ - -					Left to right
Unary					- ++ - -  sizeof					Right to left
Multiplicative			* / %							Left to right
Additive				+ -								Left to right
Logical 					AND&&							Left to right
Logical 					OR	||							Left to right

There are 3 types of operators depending on no of operands
Unary operators--> those operators which takes only 1 operand

a)unary minus operator(-) is used for negation.
The minus operator ( â€“ ) changes the sign of its argument. A positive number becomes negative, and a negative number becomes positive.

 
int a=5;
a = -a;
a =-5

int a=-5;
a=-a;
a=-(-5)
a=5
=====================================================================================
b)increment operator(++)
The increment operator ( ++ ) is used to increment the value of the variable by 1. The increment can be done in two ways:

int a=10;
a++;//a=a+1 //a=10+1 //a=11
++a;//a=a+1//a=11+1 //a=12








Increment operator is divided into 2 types
1)pre increment operator(increment,assign)
int a=10;
int b;
b=++a;
//a=11
//b=11

2)post increment operator(assign,increment)
int a=10;
int b;
b=a++;
//a=11
//b=10

c)decrement operator(--)
It is used to decrement the value of the variable by 1. The decrement can be done in two ways:

int a=10;
a--;//a=a-1 //a=10-1 //a=9
--a;//a=a-1//a=9-1 //a=8

decrement operator is divided into 2 types
1)pre decrement operator(decrement,assign)
int a=10;
int b;
b=--a;
//a=9
//b=9

2)post decrement operator(assign,decrement)
int a=10;
int b;
b=a--;
//a=9
//b=10

d) NOT ( ! )
The logical NOT operator ( ! ) is used to reverse the logical state of its operand. If a condition is true, then the Logical NOT operator will make it false and viceversa.

Example:
   If x is true, then !x is false
   If x is false, then !x is true

int main() 
{
    int x=!0;
    printf("%d",x);
}

e)sizeof()
This operator returns the size of its operand, in bytes.
its a keyword

int a=10;
sizeof(a)--->4 bytes

sizeof(double)-->8 bytes

char ch='x';
sizeof(ch)-->1 byte

sizeof(100)-->4 bytes

sizeof(1.1)--->8 bytes
every decimal number is by default double 

sizeof(1.1f)--->4 bytes
=======================================================================


















2)binary operators--->requires 2 operands
binary operators is divided into 4 types

1)Arithmetic operators(+,-,/,*,%)

Modulus(%)
Calculate the remainder when the first operand is divided by the second operand.	
x % y

10/2-->5   / gives quotient part after division
10%2-->0   % gives remainder part after division
---------------------------------------------------------------------------------------------------------------------

 The % modulus operator cannot be applied to floating-point numbers i.e. float or double. If you try to use the modulo operator with floating-point constants or variables, the compiler will produce an error.
10.0f %2-->error
-----------------------------------------------------------------------------------------------------------------------------
% gives numerator as result when numerator is less than denominator
2%10-->2
100%110-->100
--------------------------------------------------------------------------------------------------------

2)Relational operator      >,<,<=,>=,==(comparison),!=(not=)
==>In C, relational operators are the symbols that are used for comparison between two values .
==>The result that we get after the relational operation is a boolean value, that tells whether the comparison is true or false.
==> Relational operators are mainly used in conditional statements and loops to check the conditions in C programming.
==>Relational operators return 1 if expression is true and return 0 if expression is false

nonzero--->other than 0--->true-->1
-5-->other than 0--->true--->1
zero-->0->false-->0

int x=5>2;
x=1

int a=10,b=2;
int c=   a==b;
c=0

3)Assignment operator(=)-->Assignment operators are used for assigning value to a variable. The left side operand of the assignment operator is a variable and right side operand of the assignment operator is a value. The value on the right side must be of the same data-type of the variable on the left side
int a = 10;//initilization

10=a;//not valid

c=a+b;//valid

a+b=c;//not valid(expression cannot be used on lhs of assignment operator)


4)Logical operators(&&(AND),||(OR) !(NOT)
 Logical Operators returns either 0 or 1, it depends on whether the expression result is true or false.

We have 3 logical operators in the C language:

Logical AND ( && )
Logical OR ( || )
Logical NOT ( ! )

Types of Logical Operators
1. Logical AND Operator ( && )
If both operands are non zero then the condition becomes true(1). Otherwise, the result has a value of 0(false). 
2. Logical OR Operator ( || )
The condition becomes true if any one of them is non-zero. Otherwise, it returns false i.e., 0 as the value.
3. Logical NOT Operator ( ! )
If the condition is true then the logical NOT operator will make it false and vice-versa. 
	
		&&		||
0 0		0		0
0 1		0		1
1 0 		0		1
1 1		1		1


(1&&5) || (1||2)
1 || 1
1

==================================================================
Constant variable
==>The variable declare with const keyword is called as constant variable
==>value of constant variable cannot be changed
const int a=10;
a++; // a=a+1 //a=10+1 //a=11---->error
a=a+1;

const int b=20;
int c=b+2;



==>constant variable should be initialized at the time of declaration
int a;
a=10;//allowed

const int a;
a=10;//not allowed

const int a=10;//allowed

==>we can use the value of a constant variable but we cannot change the value.

int a=10;
a++;//a=a+1 //a=10+1 //a=11

const int a=10;
a++;//error //a=a+1 // a=10+1 //a=11 //not possible

const int a=20;
int b=a+1;//allowed

value of constant variable can be used on rhs of assignment operator
constant variable cannot be used on LHS of asssignment operator


const int a=30;
int b=a*2;//no error
a++;//error a=a+1 
a*2;//no error
a=a*2;//error
------------------------------------------------------------------------------------------------------------------------






scanf()-->to accept values/inputs from the user
printf()-->to display values/output on the console/output screen

Components of a C Program:
==>A header file is a file with extension .h which contains C function declarations and macro definitions to be shared between several source files. 
==>All lines that start with # are processed by a preprocessor which is a program invoked by the compiler. 

main() is the entry point of a C program and the execution  begins with the first line of the main().
The value returned by the main indicates the status of program termination. The returned value may be used by an operating system to know the termination status of your program.

#include<stdio.h>


int main()
{
	int radius;
	float area;
	printf("enter radius");
	scanf("%d",&radius);
	area=3.142f * radius * radius;
	printf("area of circle=%f",area);
}
-----------------------------------------------------------------------------------------------------
Typecasting

==>Conversion of one datatype into another datatype is called as typecasting
==>The type conversion is only performed to those data types where conversion is possible. 
==>Type conversion is performed by a compiler.
==>In type conversion, the destination data type canâ€™t be smaller than the source data type.
char -> short int -> int -> float -> double -> 

int/int-->int    		5/2-->2
int/float-->float 		5/2.0f-->2.5
float/int-->float 		5.0f/2-->2.5
float/float-->float 	5.0f/2.0f-->2.5

There are 2 types of typecasting
1)implicit typecasting-->typecasting done by compiler implicitly
2)explicit typecasting-->typecasting done by programmer explicitly

#include<stdio.h>
int main()
{
	int a=5,b=2;
	int c = a/b;
	printf("value of c=%d",c);
}

#include<stdio.h>
int main()
{
	int a=5,b=2;
	float c = a/b;
	float c= 5/2;
	printf("value of c=%f",c);
}

with implicit typecasting,value is getting truncated
we are not getting exact value thats why use explicit typecasting for getting exact  answer

Explicit Typecasting
Here the user can typecast the result to make it of a particular data type. The syntax in C Programming:
(type) expression
Type indicated the data type to which the final result is converted. 

#include<stdio.h>
int main()
{
	int a=5,b=2;
	float c = (float)a/b;
	printf("value of c=%f",c);
}

// C program to demonstrate explicit type casting
#include<stdio.h>
  int main()
{
    double x = 1.2;
       // Explicit conversion from double to int
    int sum = (int)x + 1;
      printf("sum = %d", sum);   
}

#include <stdio.h>
 int main() {
  float a = 1.5;
  int b = (int)a;
 
  printf("a = %f\n", a);
  printf("b = %d\n", b);
}

wap to accept 5 marks(int) of a student from the user and calculate 
average(float) of that student
#include<stdio.h>
int main()
{
	int a, b, c, d, e, sum;
	float avg;
	printf("enter marks");
	scanf("%d%d%d%d%d", &a, &b, &c, &d, &e);
	sum = a + b + c + d + e;
	avg = sum / 5;
	printf("Average is = %f", avg);
	
}

==========================================================

//width specification-->restrict the compiler in accepting no of inputs from the user
//scanf("%wd",&variablename);

#include<stdio.h>
int main()
{
	int num,rem1,rem2,rem3,sum;
	printf("accept 3 digit number\n");
	scanf("%3d",&num);
	printf("num=%d\n",num);
	rem1=num%10;
	num=num/10;
	rem2=num%10;
	num=num/10;
	rem3=num%10;
	num=num/10;
	sum=rem1+rem2+rem3;
	printf("sum=%d",sum);
}
========================================================================
What is Character Arithmetic?
==>Character arithmetic is used to implement arithmetic operations like addition, subtraction, multiplication, and division on characters in C language. 
In character arithmetic character converts into an integer value to perform the task. For this ASCII value is used.

0 to 255 Ascii  value range (ASCII(American standard code for information interchange)
 VALUES-->integer constant) i.e 256 characters 

'A'-->65
'B'-->66
' '-->32
'0'-->48
'1'-->49
'a'-->97

int main()
{
    char a = 'A';
    char b = 'B';
 
    printf("a = %c\n", a);
    printf("b = %c\n", b);
    printf("a + b = %c\n", a + b);
}

#include<stdio.h>
int main()
{
	char ch = 'A';
	printf("ASCII VALUE OF %c is %d", ch, ch);

}

#include<stdio.h>
int main()
{
	char ch = '0';
	printf("ASCII VALUE OF %c is %d", ch, ch);

}
#include<stdio.h>
int main()
{
	char ch = ' ';
	printf("ASCII VALUE OF %c is %d", ch, ch);

}

#include<stdio.h>
int main()
{
	char ch = 'A';
	printf("ASCII VALUE OF %c is %d",ch+1,ch+1);

}

}
=========================================================================================
Compile time vs Runtime
 Compile-time is the time at which the source code is converted into an executable code while the run time is the time at which the executable code is started running. Both the compile-time and runtime refer to different types of error.

Compile-time errors
Compile-time errors are the errors that occurred when we write the wrong syntax and symantic. 

The compile-time errors can be:
Syntax errors
Semantic errors

Syntax errors
When the programmer does not follow the syntax of any programming language, then the compiler will throw the syntax error.

For example,
int a, b:

Semantic errors
The semantic errors exist when the statements are not meaningful to the compiler and order of structure is not proper .

For example,

a+b=c;

The above statement throws a compile-time errors. In the above statement, we are assigning the value of 'c' to the summation of 'a' and 'b' which is not possible in C programming language as it can contain only one variable on the left of the assignment operator while right of the assignment operator can contain more than one variable.

The above statement can be re-written as:

c=a+b;
=====================================================================================
Runtime errors
The runtime errors are the errors that occur during the execution . The examples of runtime errors are division by zero, etc. These errors are not easy to detect as the compiler does not point to these errors.
such as division by zero, determining the square root of a negative number.

#include <stdio.h>  
int main()  
{  
    int a=20;  
    int b=a/0; // division by zero  
    printf("The value of b is : %d",b):  
    return 0;  
}  
=================================================================================================
RAM(PRIMARY STORAGE)
MEMORY IS DIVIDED INTO THREE SECTION

1)STACK SECTION
2)HEAP SECTION
3)DATA SECTION

Types of Variables in C
LOCAL VARIABLE
A variable that is declared inside the function or block is called a local variable.
1)local variable cannot be declared globally 
2)initial value is garbage
3)scope and lifetime is within the block/within the function
4)storage is stack section

==>lifetime means how long the variable exists in the memory
==>scope means how long the variable can be accessed
in local variable lifetime depends on scope of variable


==>if scopes are different then two variables may have same name,but there addresses
will be different
#include<stdio.h>
int main()
{
	int a=10;
	 printf("%d",a);
	 {
		 int a=100;
		 printf("%d",a);
	 }
	 printf("%d",a);
}

GLOBAL VARIABLE

A variable that is declared outside the function or block is called a global variable.
initial value is 0
storage is data section
lifetime is through out the program
scope-->through out the program

int value=20;//global variable  
int main()
{
int value=10;//local variable 
printf("%d", a);

}
local variable is having high priority over global variable 
}  
==>Two variables can have same if scopes of two variables are different.
==>no two variables can share memory location even if there names are same





=====================================================


Decision making statements
==>The if-else statement in C is used to perform the operations based on some specific condition. The operations specified in if block are executed if and only if the given condition is true.

==>whenever some statements will get executed depending on the condition, that condition may be  true/false,such statements is called as decision making statements

There are the following variants of if statement in C language.
If statement
If-else statement
If else-if ladder
Nested if

If Statement
The if statement is used to check some given condition and perform some operations depending upon the correctness of that condition. It is mostly used in the scenario where we need to perform the different operations for the different conditions. 

if(condition/expression)//AE,RE,LE,CONSTANT,character
{	
	//block of statements;
}

if the output of the expression is nonzero that means expression is true,if expression is true then
 the statements inside if will get executed otherwise it will get skipped

if(-5)//1,10,2+2,5<10,1&&1,'A'
{
		printf("hello");
}
output-->hello

if(0)//7-7,0&&0,7>10
{
		printf("hello");
}
//output--->no output

Program to find the largest number of the three.
#include <stdio.h>  
int main()  
{  
    int a, b, c;   
     printf("Enter three numbers?");  
    scanf("%d %d %d",&a,&b,&c);  
    if(a>b && a>c)  
    {  
        printf("%d is largest",a);  
    }  
    if(b>a  && b > c)  
    {  
        printf("%d is largest",b);  
    }  
    if(c>a && c>b)  
    {  
        printf("%d is largest",c);  
    }  
    if(a == b && a == c)   
    {  
        printf("All are equal");   
    }  
}  
------------------------------------------------------------------------------------------------------------
If-else Statement
The if-else statement is an extension to the if statement using which, we can perform two different operations, i.e., one is for the correctness of that condition, and the other is for the incorrectness of the condition. Here, we must notice that if and else block cannot be executed simiulteneously. 
***if block can exist without else(if can be standlone)
**there should not be any statements between if and else
**else cannot be standalone,it always requires if block

syntax:

if(expression/condition)
{
	//block of statements;
}
else
{
	//block of statements;
}
---------------------------------
#include<stdio.h>
int main()
{
	if(0)
	printf("hello");
	printf("hi");
}
//hi
=============================================
#include<stdio.h>
int main()
{
	if(1)
	printf("hello");
	printf("hi");
}
//hello hi
=================================================
==============================================
#include <stdio.h>
void main()
{
	int marks;
	printf("enter agg marks\n");
	scanf("%d",&marks);
	if(marks>=60)
	printf("you are eligible");
	printf("good bye");
}
============================================================
wap to accept 1 number and print whether the number is even or odd

int main()
{
	int num;
	printf("enter number");
	scanf("%d",&num);//6
	if(num%2==0) // if(num%2!=1) // if(!(num%2==1))
	printf("even");
	else
	printf("odd");

}

---------------------------------------------------------

#include<stdio.h>
int main()
{
	int num;
	printf("accept number\n");
	scanf("%d",&num);
	if(num>=1 && num<=100)
	printf("in range");
	else	
	printf("not in range");
}
=================================================================
'0'-->48
'1'-->49
'9'-->57





#include<stdio.h>
int main()
{
	char num;
	printf("accept character\n");
	scanf("%c",&num);//'0'
	if(num>=48  && num<=57)
	printf("digit");
	else	
	printf("may be charcater/symbol");
}
==============================================================

#include<stdio.h>
int main()
{
	char ch;
	printf("accept character\n");
	scanf("%c",&ch);
	if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u')
	printf("vowel");
	else	
	printf("not vowel");
}
=============================================================
If else-if ladder Statement
The if-else-if ladder statement is an extension to the if-else statement. It is used in the scenario where there are multiple cases to be performed for different conditions. In if-else-if ladder statement, if a condition is true then the statements defined in the if block will be executed, otherwise if some other condition is true then the statements defined in the else-if block will be executed, at the last if none of the condition is true then the statements defined in the else block will be executed.

syntax:
if(condition1){  
//code to be executed if condition1 is true  
}else if(condition2){  
//code to be executed if condition2 is true  
}  
else if(condition3){  
//code to be executed if condition3 is true  
}  
...  
else{  
//code to be executed if all the conditions are false  
}  

----------------------------------------------------------------
#include <stdio.h>  
int main()  
{  
    int marks;   
    printf("Enter your marks?");  
    scanf("%d",&marks);   
    if(marks > 85 && marks <= 100)  
    {  
        printf("Congrats ! you scored grade A ...");   
    }  
    else if (marks > 60 && marks <= 85)   
    {  
        printf("You scored grade B + ...");  
    }  
    else if (marks > 40 && marks <= 60)   
    {  
        printf("You scored grade B ...");  
    }  
    else if (marks > 30 && marks <= 40)   
    {  
        printf("You scored grade C ...");   
    }  
    else   
    {  
        printf("Sorry you are fail ...");   
    }  
}  

ladder of if 
#include <stdio.h>
int main()
{
	int a,b;
	printf("enter a and b\n");
	scanf("%d%d",&a,&b);
	if(a>b)
	printf("%d is greater than %d ",a,b);
	if(a==b)
	printf("%d and %d are equal",a,b);
	else
	printf("%d is less than %d ",a,b);
		 
}
-----------------------------------------------------------------------------
Conditional Operator in C
The conditional operator is also known as a ternary operator. The conditional statements are the decision-making statements which depends upon the output of the expression. It is represented by two symbols, i.e., '?' and ':'

As conditional operator works on three operands, so it is also known as the ternary operator.

The behavior of the conditional operator is similar to the 'if-else' statement as 'if-else' statement is also a decision-making statement.

Syntax of a conditional operator
Expression1? expression2: expression3;  

In the above syntax, the expression1 is a Boolean condition that can be either true or false value.
If the expression1 results into a true value, then the expression2 will execute.
If the expression1 returns false value then the expression3 will execute.


#include<stdio.h>
int main()
{
	int a, b;
	printf("enter value of a and b\n");
	scanf("%d%d", &a, &b);
	int max = (a > b) ? 		a			:					b;
	printf("maximum no =%d", max);

} 

#include<stdio.h>
int main()
{
	int a, b;
	printf("enter value of a and b\n");
	scanf("%d%d", &a, &b);//50 20
	(a > b) ? printf("%d is greater",a) : printf("%d is greater",b);

}


#include<stdio.h>
int main()
{
	int a=5, b=2;
	int c = a != b ? a++        :            b++;
	printf("%d %d %d", a, b, c);

}


----------------------------------------------------------------------------------------------------------------------------------------------

nested if else--->one if-else is a part of another if-else is called as nested if-else.
if(condition1)
{
	if(condition2)
	{
	}
	else
	{
	}
}
else
{
	-=============
}

#include <stdio.h>
int main()
{
	int a,b;
	printf("enter a and b\n");
	scanf("%d%d",&a,&b);
	if(a>=b)
	{
		if(a==b)
		printf("%d and %d are equal",a,b);
		else
		printf("%d is greater than %d ",a,b);

	}
	else
	printf("%d is less than %d ",a,b);
		 
}
  
---------------------------------------------------------------------------------------------



switch statements/selection statements

Switch case statement evaluates a given expression and based on the evaluated value(matching a certain condition), it executes the statements associated with it. Basically, it is used to perform different actions based on different conditions(cases). 


switch(expression){    
case value1:    
 //code to be executed;    
 break;  //optional  
case value2:    
 //code to be executed;    
 break;  //optional  
......    
    
default:     
 code to be executed if all cases are not matched;    
}    
Rules for switch statement in C language
The switch expression must be of an integer or character type.
The case value must be an integer or character constant.
The case value can be used only inside the switch statement.
The break statement in switch case is not compulsory. It is optional. If there is no break statement found in the case, all the cases will be executed present after the matched case. It is known as fall through the state of C switch statement.

	if(6+6)//condition-->nonzero(12)-->TRUE
	{
		printf("hi");
	}
	//hi
	if(6-6)//condition-->zero(0)-->false
	{
		printf("hi");
	}
	//no output

	switch(6+6)//exact value-->12
	{
	case 13:printf("hi");
	case 12:printf("bye");
	}
	//bye
	switch(6-6)//exact value-->0
	{
	case 13:printf("hi");
	case 0:printf("bye");
	}
	//bye


==>switch expression cannot contain float and double constant and 
variable name and string
==>case value can not contain float and double constant and variable
 and string
==>case value should not be repeated

Valid Switch		Invalid Switch		Valid Case		Invalid Case
switch(x)		switch(1.1f)			case 3;			case 2.5;
switch(x>y)		switch(x+2.5)		case 'a';			case x;
switch(a+b-2)						case 1+2;		case x+2;
									case 'x'>'y';		case 1,2,3;
													case "hello"
Functioning of switch case statement
First, the expression specified in the switch statement is evaluated. This value is then matched one by one with the constant values given in the different cases. If a match is found, then all the statements specified in that case are executed along with the all the cases present after that case including the default statement when no break is specified. No two cases can have similar values. If the matched case contains a break statement, then all the cases present after that will be skipped, and the control comes out of the switch. Otherwise, all the cases following the matched case will be executed.

Break Keyword:
The "break" keyword is used within the code block of each case to terminate the switch statement prematurely. When the program encounters a "break" statement inside a case block, it immediately exits the switch statement, preventing the execution of subsequent case blocks. 


Default Keyword:
When none of the case constants match the evaluated expression, it operates as a catch-all case. If no matching case exists and a "default" case exists, the code block associated with the "default" case is run


#include <stdio.h>
int main()
{
	switch (6 + 2)
	{
	case 7:printf("hi");
	case 8:printf("bye");
	}
}
//bye
==================================================
#include <stdio.h>
int main()
{
	switch (6 + 2)
	{
	case 7:printf("hi");
	case 8:printf("bye");
	
	case 20:printf("goodbye");
	
	case 22:printf("hello");

	}
}
//bye goodbye
-========================================================

#include <stdio.h>
int main()
{
	switch (6 >2)
	{
	case 0:printf("hi");
	case 1:printf("bye");
	}
	
}
//bye
====================================================
#include <stdio.h>
int main()
{
	switch (6 >2)
	{
	case 1:printf("hi");
		break;//takes the control outside the block
	case 0:printf("bye");
	}

}
//hi
================================================

#include <stdio.h>
int main()
{
	switch (6 >2)
	{
	case 1:printf("hi");
	case 0:printf("bye");
	}

}
//hi bye
=============================================


#include <stdio.h>
int main()
{
	switch (1&&1)
	{
	case 1:printf("hi");
		break;//takes the control outside the block
	case 0:printf("bye");
	}
}
//hi
==========================================

#include <stdio.h>
int main()
{
	switch (5)
	{
	case 5:printf("hi");
		
	case 1:printf("bye");
	
	case 2:printf("goodbye");
	}

	
}
//hi bye goodbye
=============================================
#include <stdio.h>
int main()
{
	switch ('z')
	{
	case 'z':printf("hi");
	break;	
	case 'Z':printf("bye");
	}
}
//hi
==============================================

#include <stdio.h>
int main()
{
	char a = 'A';
	switch (a)
	{
	case 65:printf("hi");
	
	case 0:printf("bye");

	}
}
//hi bye
==========================================
#include <stdio.h>
int main()
{
	char a = 'A';
	switch (a)
	{
	case 66:printf("hi");
	case 0:printf("bye");
	}

}
o/p-->no output
==========================================

#include <stdio.h>
int main()
{
	char a = 'A';
	switch (a)
	{
	default:printf("invalid case value");
	case 66:printf("hi");
	case 0:printf("bye");
	

	}
}




//invalid case value
==========================================
#include <stdio.h>
int main()
{
	
	switch (1)
	{
	case 66:printf("hi");
	case 1&&1:printf("bye");
	default:printf("invalid case value");

	}
}







//bye invalid case value
===========================================
#include <stdio.h>
int main()
{
	
	switch (1)
	{
	case 66:printf("hi");
	case 6>1:printf("bye");
	default:printf("invalid case value");

	}
}






o/p-->bye invalid case value

=========================================

#include <stdio.h>
int main()
{
	
	switch (1)
	{
	case 66:printf("hi");
	case 'B':printf("bye");
		break;
	default:printf("invalid case value");

	}
}




//error
=======================================
#include <stdio.h>
int main()
{
	float a=1;
	switch (a)
	{
	case 1:printf("hi");
	case 'b':printf("bye");
		break;
	default:printf("invalid case value");

	}
}
o/p-->//error
==========================================================
	
#include<stdio.h>
int main()
{
	int a,b,res,ch;
	printf("MENU\n");
	printf("1.ADD\n2.SUB\n3.DIV\n4.MULT\n");
	printf("enter the value of a and b\n");
	scanf("%d%d",&a,&b);
	printf("enter choice\n");
	scanf("%d",&ch);
	switch(ch)
	{
	
	case 1:res=a+b;
		
	case 4/2:res=a-b;
		
	case 3:res=a/b;
		
	case 4:res=a*b;
		
	}
	printf("result=%d",res);
	
}
 ==>We can use a range of numbers instead of a single number or character in the case statement. Range in switch case can be useful when we want to run the same set of statements for a range of numbers so that we do not have to write cases separately for each value.

You can specify a range of consecutive values in a single case label.
Syntax
The syntax for using range case is:
case low ... high:

It can be used for a range of ASCII character codes like this:
case 'A' ... 'Z':

You need to Write spaces around the ellipses ( â€¦ ). For example, write this:
// Correct  -   case 1 ... 5: 
// Wrong -    case 1...5: 

#include <stdio.h>
int main()
{
    int arr[] = { 1, 5, 15, 20 };
 
    for (int i = 0; i < 4; i++) {
        switch (arr[i]) {
            // range 1 to 6
        case 1 ... 6:
            printf("%d in range 1 to 6\n", arr[i]);
            break;
            // range 19 to 20
        case 19 ... 20:
            printf("%d in range 19 to 20\n", arr[i]);
            break;
        default:
            printf("%d not in range\n", arr[i]);
            break;
        }
    }
    return 0;
}

---------------------------------------------------------------------
LOOPS::
when a certain task/statements is need to be repeated a number of times,loop should be used.
The looping can be defined as repeating the same process multiple times until a specific condition satisfies.

ex: if we need to print the first 10 natural numbers then, instead of using the printf statement 10 times, we can print inside a loop which runs up to 10 iterations.

ADV OF LOOPS
1)Loops in programming are used to repeat a block of code until the specified condition is meet. A loop statement allows programmers to execute a statement or group of statements multiple times without repetition of code.
2)provides reusability

There are 2 types of loops

a)pretested loop/entry control loop

First condition is checked,if condition is true then statements inside loop will get execute,if condition is false then statements inside loop will not get execute
ex:for,while

b)post-tested loop/exit control loop
First the statements inside loop will get execute atleast once,then the condition will get check,if condition is true then the statents inside loop will get execute otherwise it will get skipped.
ex:do-while loop
=========================================================================================
for loop in C
The for loop is used in the case where we need to execute some part of the code until the given condition is satisfied. The for loop is also called as a per-tested loop. It is better to use for loop if the number of iteration is known in advance.

The syntax of for loop in c language is given below:

for(initialization;condition;incr/decr){  
//code to be executed  
}  
when no of iterations is already known to the user at that time it is feasible/approachable to use for loop
iteration-->how many times the control will enter inside loop

#include<stdio.h>
int main()
{
	int a;
	for (a = 1; a <= 10; a++)
	{
		printf("%d\t", a);//1 2 3 4 5 ----10
	}
}
==============================================

#include<stdio.h>
int main()
{
	int a=1;
	for (; a <= 10; )
	{
		printf("%d\t", a);
		a++;
	}
}
=====================================================
#include<stdio.h>
int main()
{
	int a;
	for (a = 1; a <= 20; a++)
	{
		if(a%2==0)//if(a%2!=1)  // if(!(a%2==1))
		printf("%d\t", a);
	}
}
==============================================================
#include<stdio.h>
int main()
{
	int a;
	for (a = 65; a <= 90; a++)
	{
		
		printf("%c\t", a);
	}
}
==========================================================
#include<stdio.h>
int main()
{
	char a;
	for (a = 'A'; a <= 'Z'; a++)
	{
		
		printf("%c\t", a);
	}
}
===========================================
#include<stdio.h>
int main()
{
	int a;
	for (a=65;a<=90;a=a+2)
	{
		
		printf("%c\t",a);
	 } 
}
=====================================================
5*1=5
5*2=10

5*10=50










#include<stdio.h>
int main()
{
	int num,i;
	printf("enter number\n");
	scanf("%d", &num);//5
	for (i = 1; i <= 10; i++)
	{
		printf("%d * %d = %d\n", num, i, num * i);
	}
	
	
}

//c.w-->
num-->5
5*2=10
5*4=20
5*6=30
5*8=40
5*10=50

==========================================================
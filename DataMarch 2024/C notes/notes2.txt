==========================================================
1+2+3+4+-----------10 =====>55
#include<stdio.h>
int main()
{
	int i, sum=0;
	for (i = 1; i <= 10; i++)
	{
		sum =sum + i;
	}
	printf("summation=%d", sum);
	
	
}
======================================================
1*2*3*4-------------10=======>
#include<stdio.h>
int main()
{
	int i, mult=1;
	for (i = 1; i <= 10; i++)
	{
		mult =mult * i;
	}
	printf("multiplication=%d", mult);
	
	
}
========================================================
3!--->1*2*3
4!-->1*2*3*4
num!-->1*2*3----num

num=6
for(i=1;i<=num;i++)
{
		fact=1*2*3*4*5*6;

}


#include<stdio.h>
int main()
{
	int num, i, fact = 1;
	printf("enter number\n");
	scanf("%d", &num);
	for (i = 1; i <= num; i++)
	{
		fact = fact * i;
	}

	printf("factorial=%d", fact);
}


===========================================================
#include<stdio.h>
int main()
{
	int i;
	for (i = 1; i <= 10; i++)
	{
		if (i == 5)
		break;//takes the control outside the block/loop
		printf("%d\t", i);
	}
}
=======================================================================
#include<stdio.h>
int main()
{
	int num, i;
	printf("enter number\n");
	scanf("%d", &num);//5
	for (i = 1; i <= 10; i++)
	{
		if (i == num)
			break;
		printf("%d * %d = %d\n", num, i, num * i);
	}

}
======================================================================
#include<stdio.h>
int main()
{
	int i;
	for (i = 1; i <= 10; i++)
	{
		if (i == 5)
		continue;//skips the iteration that satisfies the condition and 
		//control jumps to the next iteration
		printf("%d\t", i);
	}
}

//wap to print even numbers between 1 to 20 using continue keyword

#include<stdio.h>
int main()
{
	int i;
	for (i = 1; i <= 20; i++)
	{
		if (i%2==1)
			continue;
		printf("%d\t", i);
	}
}

#include<stdio.h>
int main()
{
	int i, j;
	for (i = 1, j = 5 ; i <= 5 && j != 2; i++, j--)
	{
		printf("%d %d\n", i, j); 
	}
}






c.w
//wap to print addition of even and odd number between 1 to 20
#include<stdio.h>
int main()
{
	int i,sum_e=0,sum_o=0;
	for (i = 1; i <= 20; i++)
	{
		if (i % 2 == 0)
		{
			sum_e = sum_e + i;
		}
		else
		{
			sum_o = sum_o + i;
		}
	}
	printf("%d  %d", sum_e, sum_o);
	
}

c.w
//accept 5 marks each for 5 students and display there respective averages

#include<stdio.h>
int main()
{
	int student, m1, m2, m3, m4, m5, sum;
	float avg;
	for (student = 1; student <= 5; student++)
	{
		printf("enter 5 marks\n");
		scanf("%d%d%d%d%d", &m1, &m2, &m3, &m4, &m5);
		sum = m1 + m2 + m3 + m4 + m5;
		avg = (float)sum / 5;
		printf("average of %d student is %f\n", student, avg);
	}
}

c.w
2 5 8 11
#include<stdio.h>
int main()
{
	int i;
	for (i = 2; i <= 20; i+=3)//i=i+3
	{
	
		printf("%d\t", i);
	}
}

c.w---> 5 10 15 20 25
=================================

#include<stdio.h>
int main()
{
	for(;1;)//condition-->1--->nonzero---->true--
	{
		printf("hi");
	}
}

==================================
#include<stdio.h>
int main()
{
	for(;'A';)
	{
		printf("hi");
	}
}
====================================
#include<stdio.h>
int main()
{
	for(;-5;)
	{
		printf("hi");
	}
}
===================================
#include<stdio.h>
int main()
{
	for(;0;)
	{
		printf("hi");
	}
}
============================================
#include<stdio.h>
int main()
{
	for(;;)//if condition is not given then by default condition is true
	{
		printf("hi");
	}
}
============================================
C.W -->
BASE 2 EXP 3  POWER--->8

POW=2*2*2

#include <stdio.h>

int main()
{
    int base, exponent, i, power = 1;
    printf("Enter base");
    scanf("%d", &base);
    printf("Enter exponent");
    scanf("%d", &exponent);

    for(i=1; i<=exponent; i++)
    {
        power = power * base;
    }

    printf("%d", power);

}

================================================================
#include <stdio.h>  
#include <math.h>  
int main ()  
{  
   
int base, exp;  
int result; 
printf (" Enter the base value from the user: ");  
scanf (" %d", &base);   
printf (" Enter the power value for raising the power of base: ");  
scanf (" %d", &exp);  
result = pow ( base, exp);  
printf (" %d to the power of %d is %d",base,exp, result);
}

===============================================
while loop in C
The while loop in c is to be used in the scenario where we don't know the number of iterations in advance. 
The block of statements is executed in the while loop until the condition specified in the while loop is satisfied. 
It is also called a pre-tested loop.
ex-->display 1st 25 prime numbers

SYNTAX:

	initilization;
	while(condition/expression)
	{
	  //block of stat;
	  //incre/decre;
	}

#include<stdio.h>
int main()
{
	int i = 1;
	while (i <= 20)
	{
		if (i % 2 == 0)
			printf("%d\t", i);
		i++;
	}
}

Armstrong number( 0 to 999)

153
1*1*1 +  5*5*5 + 3*3*3 
1+125+27
153

370
371
407
0
1




#include<stdio.h>
int main()
{
	int num, rem, sum = 0, orgnum;
	printf("enter number\n");
	scanf("%d", &num);
	orgnum = num;
	while (num != 0)
	{
		rem = num % 10;//3 5 1
		num = num / 10;//num=15 1 0
		sum = sum + rem * rem * rem;//27+125+1
	}
	if (sum == orgnum)
		printf("%d is armstrong", orgnum);
	else
		printf("%d is not armstrong", orgnum);

}

#include<stdio.h>
int main()
{
	int num, rem, sum = 0, orgnum;
	printf("enter number\n");
	scanf("%d", &num);
	orgnum = num;
	 for(;num != 0;)
	{
		rem = num % 10;
		num = num / 10;
		sum = sum + rem * rem * rem;
	}
	if (sum == orgnum)
		printf("%d is armstrong", orgnum);
	else
		printf("%d is not armstrong", orgnum);

}

-===========================================================
//accept a number from the user and display whether that number is prime number 
or not
the number which is only divisible by 1 and itself is called as prime number

5 --->2 3 4
6-->2 3 4 5

#include<stdio.h>
int main()
{
	int num, i = 2;
	printf("enter number\n");
	scanf("%d", &num);//6

	while (i <num) // i<=num-1
	{
		if (num % i == 0)
			break;
		i++;
	}
	if (i == num)
		printf("prime");
	else
		printf("not prime");
}

#include<stdio.h>
int main()
{
	int num, i;
	printf("enter number\n");
	scanf("%d", &num);//6
	for(i=2;i < num;i++)
	{
		if (num % i == 0)
			break;
	
	}
	if (i == num)
		printf("prime");
	else
		printf("not prime");
}
======================================================
n=?//n=8
0 1 1 2 3 5 8 13  -----------

#include<stdio.h>
int main()
{
	int n,i=3;
	int n1=0,n2=1,n3;
	printf("enter no of terms\n");
	scanf("%d",&n);//8
	printf("%d %d\t",n1,n2);//0 1 
	while(i<=n)
	{
		n3=n1+n2;//1
		printf("%d\t",n3);
		n1=n2;
		n2=n3;
		i++;
	}
}

do-while loop in C
The do-while loop continues until a given condition satisfies. It is also called post tested loop. It is used when it is necessary to execute the loop at least once (mostly menu driven programs).

The syntax of do-while loop in c language is given below:
  
initilization;
do
{
	//block of statements;
	//incre/decre;
}while(condition);

#include<stdio.h>
//wap to add numbers untill the user enters 0 using do-while loop
int main()
{
	int num, sum = 0;
	do
	{
		printf("enter number\n");
		scanf("%d", &num);
		sum = sum + num;
	} while (num != 0);
	printf("summation=%d", sum);
}

============================================================================
Nested loop
one loop is a part of another loop is called as nested loop. Nesting of loops is the feature in C that allows the looping of statements inside another loop. 

Any number of loops can be defined inside another loop, i.e., there is no restriction for defining any number of loops. The nesting level can be defined at n times. You can define any type of loop inside another loop

Nested for loop
one for loop is a part of another for loop is called as nested for loop
- - - - - - - - - - - - - - - ------------------------------------------------
Working of nested for loop
For one value of outer for(row) loop,inner for loop (col) executes completely.

#include<stdio.h>
int main()
{
	int row,col;
	for(row=1;row<=3;row++)
	{
		for(col=1;col<=3;col++)
		{
			printf("%d%d\t",row,col);//11 12 13
									 //21 22 23
									//31 32 33
		}
		printf("\n");
	}
	
}
============================================================
* * *
* * *
* * *

#include<stdio.h>
int main()
{
	int row,col;
	for(row=1;row<=3;row++)
	{
		for(col=1;col<=3;col++)
		{
			printf("*\t");
		}
		printf("\n");
	}
	
}
============================================================

5*1=5
|
|
5*10=50
******************
6*1=6
|
|
6*10=60
*****************
10*1=10
|
|
10*10=100
*****************

#include<stdio.h>
int main()
{
	int i,j;
	for (i=5;i<=10;i++)
	{
		for(j=1;j<=10;j++)

		{
			printf("%d * %d = %d\n",i,j,(i*j));
			//inner for loop will execute no of rows * col times
			//60 times
		}
		printf("\n-------------------------------------------\n");
		//outer for loop will execute no of rows times
		//6 times
	}
	- 
}
#include<stdio.h>
/*

*
**
***
****

*/






int main()
{
	int row,col;
	for(row=1;row<=4;row++)
	{
		for(col=1;col<=row;col++)
		{
			printf("*\t");
		}
		printf("\n");
	}
	
}

-----------------------------------------------------------
1
12
123
1234
12345

int main()
{
	int row, col;
	for (row = 1; row <= 5; row++)
	{
		for (col = 1; col <= row; col++)
		{
			printf("%d\t", col);
		}
		printf("\n");
	}
}

=========================================================
1
22
333
4444
55555

#include<stdio.h>
int main()
{
	int row,col;
	for(row=1;row<=4;row++)
	{
		for(col=1;col<=row;col++)
		{
			printf("%d\t",row);
		}
		printf("\n");
	}
	
}
			OR


#include<stdio.h>

int main()
{
	int row, col,num=1;
	for (row = 1; row <= 5; row++)
	{
		for (col = 1; col <= row; col++)
		{
			printf("%d\t",num);
		}
		num++;
		printf("\n");
	}
}


==============================================================

FLOYD'S TRIANGLE
1
2 3
4 5 6
7 8 9 10

int main()
{
	int row, col,num=1;
	for (row = 1; row <= 4; row++)
	{
		for (col = 1; col <= row; col++)
		{
			printf("%d\t", num);
			num++;
		}
		printf("\n");
	}
}
===============================================================
===============================================
#include<stdio.h>
/*
A
BB
CCC
DDDD
EEEEE
*/
int main()
{
	int row,col;
	char ch='A';
	for(row=1;row<=5;row++)
	{
		for(col=1;col<=row;col++)
		{
			printf("%c",ch);
			
		}
		ch++;
		printf("\n");
	}
}
==============================================
A
BC
DEF
GHIJ
KLMNO
int main()
{
	int row,col;
	char ch='A';
	for(row=1;row<=5;row++)
	{
		for(col=1;col<=row;col++)
		{
			printf("%c",ch);
			ch++;
			
		}
		printf("\n");
	}}
----------------------------------------------------------------

*****
****
***
**
*
int main()
{
	int row,col;
	for(row=5;row>=1;row--)
	{
		for(col=1;col<=row;col++)
		{
			printf("*\t");
			
		}
		printf("\n");
	}
}
==================================================================

AAAAA
BBBB
CCC
DD
E

int main()
{
	int row,col;
	char ch='A';
	for(row=5;row>=1;row--)
	{
		for(col=1;col<=row;col++)
		{
			printf("%c\t",ch);
			
		}
		ch++;
		printf("\n");}}
=================================================================
ABCDE
FGHI
JKL
MN
O

int main()
{
	int row,col;
	char ch='A';
	for(row=5;row>=1;row--)
	{
		for(col=1;col<=row;col++)
		{
			printf("%c\t",ch);
				ch++;
			
		}
	
		printf("\n");}}

=================================================================
1
10
101
1010
10101

int main()
{
	int row,col;
	for(row=1;row<=5;row++)
	{
		for(col=1;col<=row;col++)
		{
			printf("%d\t",col%2);
			
		}
		printf("\n");
	}
	
}
============================================================
//break-->takes the control to the next row
//continue-->takes the control to the next col
int main()
{
	int row,col;
	for(row=1;row<=3;row++)
	{
		for(col=1;col<=3;col++)
		{
			if(row==col)
			break;
			printf("%d%d\t",row,col);//21 31 32
		}

		printf("\n");
	}
}

//break-->takes the control to the next row
//continue-->takes the control to the next col and skips the satisfied iteration
int main()
{
	int row,col;
	for(row=1;row<=3;row++)
	{
		for(col=1;col<=3;col++)
		{
			if(row==col)
			continue;
			printf("%d%d\t",row,col);//12 13 21 23 31 32
		}
		printf("\n");
	}
}




int main()
{
	int row,col;
	for(row=1;row<=3;row++)
	{
		for(col=1;col<=3;col++)
		{
			if(col%2==0)
			break;
			printf("%d%d\t",row,col);//11  21 31
		}
		printf("\n");
	}
	
}

int main()
{
	int row,col;
	for(row=1;row<=3;row++)
	{
		for(col=1;col<=3;col++)
		{
			if(col%2==0)
			continue;
			printf("%d%d\t",row,col); //11 13 21 23 31 33
		}
		printf("\n");
	}
	
}
===========================================================================
Function
==>function is a block of statements which does some predefined task,i.e some predefined task is assigned to the function and whenever the function is called,the function has to performed predefined task.
==>A function in C is a set of statements that when called perform some specific task. It is the basic building block of a C program that provides modularity and code reusability.

adv
1)By using functions, we can avoid rewriting same logic/code again and again in a program.
2)We can call C functions any number of times in a program and from any place in a program.
3)Reusability is the main achievement of C functions.
4)readability increases
5)modularity can be achieved

Types of Functions
There are two types of functions in C programming:

Library Functions/predefined function:
==>function whose functionality is already predefined and as a user you cannot change functionality of that function .
==>The predefined functions declared in the C header files such as scanf(), printf()..
==>we need to include headerfile in our program.